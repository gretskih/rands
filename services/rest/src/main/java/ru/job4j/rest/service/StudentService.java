package ru.job4j.rest.service;

import java.net.URL;
import javax.xml.namespace.QName;
import jakarta.xml.ws.WebEndpoint;
import jakarta.xml.ws.WebServiceClient;
import jakarta.xml.ws.WebServiceFeature;
import jakarta.xml.ws.Service;
import org.springframework.stereotype.Component;

/**
 * This class was generated by Apache CXF 4.0.4
 * 2024-03-30T17:19:52.063+03:00
 * Generated source version: 4.0.4
 *
 */
@Component
@WebServiceClient(name = "StudentService",
                  wsdlLocation = "classpath:wsdl/students.wsdl",
                  targetNamespace = "http://")
public class StudentService extends Service {

    public static final URL WSDL_LOCATION;

    public static final QName SERVICE = new QName("http://", "StudentService");
    public static final QName PORT = new QName("http://", "Port");

    static {
        URL url = StudentService.class.getClassLoader().getResource("wsdl/students.wsdl");
        if (url == null) {
            java.util.logging.Logger.getLogger(StudentService.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "classpath:wsdl/students.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public StudentService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public StudentService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public StudentService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public StudentService(WebServiceFeature...features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public StudentService(URL wsdlLocation, WebServiceFeature...features) {
        super(wsdlLocation, SERVICE, features);
    }

    public StudentService(URL wsdlLocation, QName serviceName, WebServiceFeature...features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns StudentsStorageService
     */
    @WebEndpoint(name = "Port")
    public StudentsStorageService getPort() {
        return super.getPort(PORT, StudentsStorageService.class);
    }

    /**
     *
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns StudentsStorageService
     */
    @WebEndpoint(name = "Port")
    public StudentsStorageService getPort(WebServiceFeature... features) {
        return super.getPort(PORT, StudentsStorageService.class, features);
    }

}
